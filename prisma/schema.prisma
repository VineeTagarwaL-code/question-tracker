// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  questions  Question[]
  answers    Answer[]
  votes      Vote[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug String @unique
  createdAt   DateTime  @default(now())
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  totalVotes  Int       @default(0)
  totalAnswers Int      @default(0)
  answers     Answer[]
  votes       Vote[]
  tags        String[]
  updatedAt   DateTime  @updatedAt

  @@index([authorId,tags])
}


model Answer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime  @default(now())
  question   Question  @relation(fields: [questionId], references: [id])
  questionId String @db.ObjectId
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String @db.ObjectId
  votes      Vote[]
  totalVotes  Int  @default(0)
  totalAnswers Int      @default(0) 
  updatedAt  DateTime @updatedAt
  parentId   String? @db.ObjectId
  responses  Answer[] @relation("AnswerToAnswer")
  parent     Answer?  @relation("AnswerToAnswer", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@index([questionId])
  @@index([authorId])
  @@index([parentId])
}


model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  value      Int      // -1 for downvote, 1 for upvote
  user       User    @relation(fields: [userId], references: [id])
  userId     String @db.ObjectId
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String? @db.ObjectId
  answer     Answer?  @relation(fields: [answerId], references: [id])
  answerId   String? @db.ObjectId
  updatedAt  DateTime @updatedAt
  @@index([userId])
  @@index([questionId])
  @@index([answerId])
}
